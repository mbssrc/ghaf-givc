// Copyright 2024 TII (SSRC) and the Ghaf contributors
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.28.2
// source: socket.proto

package socketproxy

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SocketStream_TransferData_FullMethodName = "/socketproxy.SocketStream/TransferData"
)

// SocketStreamClient is the client API for SocketStream service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SocketStreamClient interface {
	TransferData(ctx context.Context, opts ...grpc.CallOption) (SocketStream_TransferDataClient, error)
}

type socketStreamClient struct {
	cc grpc.ClientConnInterface
}

func NewSocketStreamClient(cc grpc.ClientConnInterface) SocketStreamClient {
	return &socketStreamClient{cc}
}

func (c *socketStreamClient) TransferData(ctx context.Context, opts ...grpc.CallOption) (SocketStream_TransferDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &SocketStream_ServiceDesc.Streams[0], SocketStream_TransferData_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &socketStreamTransferDataClient{stream}
	return x, nil
}

type SocketStream_TransferDataClient interface {
	Send(*BytePacket) error
	Recv() (*BytePacket, error)
	grpc.ClientStream
}

type socketStreamTransferDataClient struct {
	grpc.ClientStream
}

func (x *socketStreamTransferDataClient) Send(m *BytePacket) error {
	return x.ClientStream.SendMsg(m)
}

func (x *socketStreamTransferDataClient) Recv() (*BytePacket, error) {
	m := new(BytePacket)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SocketStreamServer is the server API for SocketStream service.
// All implementations must embed UnimplementedSocketStreamServer
// for forward compatibility
type SocketStreamServer interface {
	TransferData(SocketStream_TransferDataServer) error
	mustEmbedUnimplementedSocketStreamServer()
}

// UnimplementedSocketStreamServer must be embedded to have forward compatible implementations.
type UnimplementedSocketStreamServer struct {
}

func (UnimplementedSocketStreamServer) TransferData(SocketStream_TransferDataServer) error {
	return status.Errorf(codes.Unimplemented, "method TransferData not implemented")
}
func (UnimplementedSocketStreamServer) mustEmbedUnimplementedSocketStreamServer() {}

// UnsafeSocketStreamServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SocketStreamServer will
// result in compilation errors.
type UnsafeSocketStreamServer interface {
	mustEmbedUnimplementedSocketStreamServer()
}

func RegisterSocketStreamServer(s grpc.ServiceRegistrar, srv SocketStreamServer) {
	s.RegisterService(&SocketStream_ServiceDesc, srv)
}

func _SocketStream_TransferData_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SocketStreamServer).TransferData(&socketStreamTransferDataServer{stream})
}

type SocketStream_TransferDataServer interface {
	Send(*BytePacket) error
	Recv() (*BytePacket, error)
	grpc.ServerStream
}

type socketStreamTransferDataServer struct {
	grpc.ServerStream
}

func (x *socketStreamTransferDataServer) Send(m *BytePacket) error {
	return x.ServerStream.SendMsg(m)
}

func (x *socketStreamTransferDataServer) Recv() (*BytePacket, error) {
	m := new(BytePacket)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SocketStream_ServiceDesc is the grpc.ServiceDesc for SocketStream service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SocketStream_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "socketproxy.SocketStream",
	HandlerType: (*SocketStreamServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "TransferData",
			Handler:       _SocketStream_TransferData_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "socket.proto",
}
