// Copyright 2024 TII (SSRC) and the Ghaf contributors
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.1
// source: locale/locale.proto

package locale

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LocaleClient_LocaleSet_FullMethodName   = "/locale.LocaleClient/LocaleSet"
	LocaleClient_TimezoneSet_FullMethodName = "/locale.LocaleClient/TimezoneSet"
)

// LocaleClientClient is the client API for LocaleClient service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LocaleClientClient interface {
	LocaleSet(ctx context.Context, in *LocaleMessage, opts ...grpc.CallOption) (*Empty, error)
	TimezoneSet(ctx context.Context, in *TimezoneMessage, opts ...grpc.CallOption) (*Empty, error)
}

type localeClientClient struct {
	cc grpc.ClientConnInterface
}

func NewLocaleClientClient(cc grpc.ClientConnInterface) LocaleClientClient {
	return &localeClientClient{cc}
}

func (c *localeClientClient) LocaleSet(ctx context.Context, in *LocaleMessage, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, LocaleClient_LocaleSet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localeClientClient) TimezoneSet(ctx context.Context, in *TimezoneMessage, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, LocaleClient_TimezoneSet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LocaleClientServer is the server API for LocaleClient service.
// All implementations must embed UnimplementedLocaleClientServer
// for forward compatibility.
type LocaleClientServer interface {
	LocaleSet(context.Context, *LocaleMessage) (*Empty, error)
	TimezoneSet(context.Context, *TimezoneMessage) (*Empty, error)
	mustEmbedUnimplementedLocaleClientServer()
}

// UnimplementedLocaleClientServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLocaleClientServer struct{}

func (UnimplementedLocaleClientServer) LocaleSet(context.Context, *LocaleMessage) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LocaleSet not implemented")
}
func (UnimplementedLocaleClientServer) TimezoneSet(context.Context, *TimezoneMessage) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TimezoneSet not implemented")
}
func (UnimplementedLocaleClientServer) mustEmbedUnimplementedLocaleClientServer() {}
func (UnimplementedLocaleClientServer) testEmbeddedByValue()                      {}

// UnsafeLocaleClientServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LocaleClientServer will
// result in compilation errors.
type UnsafeLocaleClientServer interface {
	mustEmbedUnimplementedLocaleClientServer()
}

func RegisterLocaleClientServer(s grpc.ServiceRegistrar, srv LocaleClientServer) {
	// If the following call pancis, it indicates UnimplementedLocaleClientServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LocaleClient_ServiceDesc, srv)
}

func _LocaleClient_LocaleSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LocaleMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocaleClientServer).LocaleSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocaleClient_LocaleSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocaleClientServer).LocaleSet(ctx, req.(*LocaleMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocaleClient_TimezoneSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TimezoneMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocaleClientServer).TimezoneSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocaleClient_TimezoneSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocaleClientServer).TimezoneSet(ctx, req.(*TimezoneMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// LocaleClient_ServiceDesc is the grpc.ServiceDesc for LocaleClient service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LocaleClient_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "locale.LocaleClient",
	HandlerType: (*LocaleClientServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LocaleSet",
			Handler:    _LocaleClient_LocaleSet_Handler,
		},
		{
			MethodName: "TimezoneSet",
			Handler:    _LocaleClient_TimezoneSet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "locale/locale.proto",
}
