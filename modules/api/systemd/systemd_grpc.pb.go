// Copyright 2024 TII (SSRC) and the Ghaf contributors
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.1
// source: systemd/systemd.proto

package systemd

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UnitControlService_GetUnitStatus_FullMethodName    = "/systemd.UnitControlService/GetUnitStatus"
	UnitControlService_StartUnit_FullMethodName        = "/systemd.UnitControlService/StartUnit"
	UnitControlService_StopUnit_FullMethodName         = "/systemd.UnitControlService/StopUnit"
	UnitControlService_KillUnit_FullMethodName         = "/systemd.UnitControlService/KillUnit"
	UnitControlService_FreezeUnit_FullMethodName       = "/systemd.UnitControlService/FreezeUnit"
	UnitControlService_UnfreezeUnit_FullMethodName     = "/systemd.UnitControlService/UnfreezeUnit"
	UnitControlService_MonitorUnit_FullMethodName      = "/systemd.UnitControlService/MonitorUnit"
	UnitControlService_StartApplication_FullMethodName = "/systemd.UnitControlService/StartApplication"
)

// UnitControlServiceClient is the client API for UnitControlService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UnitControlServiceClient interface {
	GetUnitStatus(ctx context.Context, in *UnitRequest, opts ...grpc.CallOption) (*UnitStatusResponse, error)
	StartUnit(ctx context.Context, in *UnitRequest, opts ...grpc.CallOption) (*UnitResponse, error)
	StopUnit(ctx context.Context, in *UnitRequest, opts ...grpc.CallOption) (*UnitResponse, error)
	KillUnit(ctx context.Context, in *UnitRequest, opts ...grpc.CallOption) (*UnitResponse, error)
	FreezeUnit(ctx context.Context, in *UnitRequest, opts ...grpc.CallOption) (*UnitResponse, error)
	UnfreezeUnit(ctx context.Context, in *UnitRequest, opts ...grpc.CallOption) (*UnitResponse, error)
	MonitorUnit(ctx context.Context, in *UnitResourceRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[UnitResourceResponse], error)
	StartApplication(ctx context.Context, in *AppUnitRequest, opts ...grpc.CallOption) (*UnitResponse, error)
}

type unitControlServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUnitControlServiceClient(cc grpc.ClientConnInterface) UnitControlServiceClient {
	return &unitControlServiceClient{cc}
}

func (c *unitControlServiceClient) GetUnitStatus(ctx context.Context, in *UnitRequest, opts ...grpc.CallOption) (*UnitStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnitStatusResponse)
	err := c.cc.Invoke(ctx, UnitControlService_GetUnitStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unitControlServiceClient) StartUnit(ctx context.Context, in *UnitRequest, opts ...grpc.CallOption) (*UnitResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnitResponse)
	err := c.cc.Invoke(ctx, UnitControlService_StartUnit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unitControlServiceClient) StopUnit(ctx context.Context, in *UnitRequest, opts ...grpc.CallOption) (*UnitResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnitResponse)
	err := c.cc.Invoke(ctx, UnitControlService_StopUnit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unitControlServiceClient) KillUnit(ctx context.Context, in *UnitRequest, opts ...grpc.CallOption) (*UnitResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnitResponse)
	err := c.cc.Invoke(ctx, UnitControlService_KillUnit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unitControlServiceClient) FreezeUnit(ctx context.Context, in *UnitRequest, opts ...grpc.CallOption) (*UnitResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnitResponse)
	err := c.cc.Invoke(ctx, UnitControlService_FreezeUnit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unitControlServiceClient) UnfreezeUnit(ctx context.Context, in *UnitRequest, opts ...grpc.CallOption) (*UnitResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnitResponse)
	err := c.cc.Invoke(ctx, UnitControlService_UnfreezeUnit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unitControlServiceClient) MonitorUnit(ctx context.Context, in *UnitResourceRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[UnitResourceResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &UnitControlService_ServiceDesc.Streams[0], UnitControlService_MonitorUnit_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[UnitResourceRequest, UnitResourceResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type UnitControlService_MonitorUnitClient = grpc.ServerStreamingClient[UnitResourceResponse]

func (c *unitControlServiceClient) StartApplication(ctx context.Context, in *AppUnitRequest, opts ...grpc.CallOption) (*UnitResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnitResponse)
	err := c.cc.Invoke(ctx, UnitControlService_StartApplication_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UnitControlServiceServer is the server API for UnitControlService service.
// All implementations must embed UnimplementedUnitControlServiceServer
// for forward compatibility.
type UnitControlServiceServer interface {
	GetUnitStatus(context.Context, *UnitRequest) (*UnitStatusResponse, error)
	StartUnit(context.Context, *UnitRequest) (*UnitResponse, error)
	StopUnit(context.Context, *UnitRequest) (*UnitResponse, error)
	KillUnit(context.Context, *UnitRequest) (*UnitResponse, error)
	FreezeUnit(context.Context, *UnitRequest) (*UnitResponse, error)
	UnfreezeUnit(context.Context, *UnitRequest) (*UnitResponse, error)
	MonitorUnit(*UnitResourceRequest, grpc.ServerStreamingServer[UnitResourceResponse]) error
	StartApplication(context.Context, *AppUnitRequest) (*UnitResponse, error)
	mustEmbedUnimplementedUnitControlServiceServer()
}

// UnimplementedUnitControlServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUnitControlServiceServer struct{}

func (UnimplementedUnitControlServiceServer) GetUnitStatus(context.Context, *UnitRequest) (*UnitStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUnitStatus not implemented")
}
func (UnimplementedUnitControlServiceServer) StartUnit(context.Context, *UnitRequest) (*UnitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartUnit not implemented")
}
func (UnimplementedUnitControlServiceServer) StopUnit(context.Context, *UnitRequest) (*UnitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopUnit not implemented")
}
func (UnimplementedUnitControlServiceServer) KillUnit(context.Context, *UnitRequest) (*UnitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KillUnit not implemented")
}
func (UnimplementedUnitControlServiceServer) FreezeUnit(context.Context, *UnitRequest) (*UnitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FreezeUnit not implemented")
}
func (UnimplementedUnitControlServiceServer) UnfreezeUnit(context.Context, *UnitRequest) (*UnitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnfreezeUnit not implemented")
}
func (UnimplementedUnitControlServiceServer) MonitorUnit(*UnitResourceRequest, grpc.ServerStreamingServer[UnitResourceResponse]) error {
	return status.Errorf(codes.Unimplemented, "method MonitorUnit not implemented")
}
func (UnimplementedUnitControlServiceServer) StartApplication(context.Context, *AppUnitRequest) (*UnitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartApplication not implemented")
}
func (UnimplementedUnitControlServiceServer) mustEmbedUnimplementedUnitControlServiceServer() {}
func (UnimplementedUnitControlServiceServer) testEmbeddedByValue()                            {}

// UnsafeUnitControlServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UnitControlServiceServer will
// result in compilation errors.
type UnsafeUnitControlServiceServer interface {
	mustEmbedUnimplementedUnitControlServiceServer()
}

func RegisterUnitControlServiceServer(s grpc.ServiceRegistrar, srv UnitControlServiceServer) {
	// If the following call pancis, it indicates UnimplementedUnitControlServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UnitControlService_ServiceDesc, srv)
}

func _UnitControlService_GetUnitStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnitControlServiceServer).GetUnitStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UnitControlService_GetUnitStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnitControlServiceServer).GetUnitStatus(ctx, req.(*UnitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UnitControlService_StartUnit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnitControlServiceServer).StartUnit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UnitControlService_StartUnit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnitControlServiceServer).StartUnit(ctx, req.(*UnitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UnitControlService_StopUnit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnitControlServiceServer).StopUnit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UnitControlService_StopUnit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnitControlServiceServer).StopUnit(ctx, req.(*UnitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UnitControlService_KillUnit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnitControlServiceServer).KillUnit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UnitControlService_KillUnit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnitControlServiceServer).KillUnit(ctx, req.(*UnitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UnitControlService_FreezeUnit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnitControlServiceServer).FreezeUnit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UnitControlService_FreezeUnit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnitControlServiceServer).FreezeUnit(ctx, req.(*UnitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UnitControlService_UnfreezeUnit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnitControlServiceServer).UnfreezeUnit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UnitControlService_UnfreezeUnit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnitControlServiceServer).UnfreezeUnit(ctx, req.(*UnitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UnitControlService_MonitorUnit_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UnitResourceRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UnitControlServiceServer).MonitorUnit(m, &grpc.GenericServerStream[UnitResourceRequest, UnitResourceResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type UnitControlService_MonitorUnitServer = grpc.ServerStreamingServer[UnitResourceResponse]

func _UnitControlService_StartApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppUnitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnitControlServiceServer).StartApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UnitControlService_StartApplication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnitControlServiceServer).StartApplication(ctx, req.(*AppUnitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UnitControlService_ServiceDesc is the grpc.ServiceDesc for UnitControlService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UnitControlService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "systemd.UnitControlService",
	HandlerType: (*UnitControlServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUnitStatus",
			Handler:    _UnitControlService_GetUnitStatus_Handler,
		},
		{
			MethodName: "StartUnit",
			Handler:    _UnitControlService_StartUnit_Handler,
		},
		{
			MethodName: "StopUnit",
			Handler:    _UnitControlService_StopUnit_Handler,
		},
		{
			MethodName: "KillUnit",
			Handler:    _UnitControlService_KillUnit_Handler,
		},
		{
			MethodName: "FreezeUnit",
			Handler:    _UnitControlService_FreezeUnit_Handler,
		},
		{
			MethodName: "UnfreezeUnit",
			Handler:    _UnitControlService_UnfreezeUnit_Handler,
		},
		{
			MethodName: "StartApplication",
			Handler:    _UnitControlService_StartApplication_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "MonitorUnit",
			Handler:       _UnitControlService_MonitorUnit_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "systemd/systemd.proto",
}
